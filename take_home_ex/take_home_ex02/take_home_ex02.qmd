---
title: "Take Home Exercise 2"
date: "18 February 2023"
date-modified: "`r Sys.Date()`"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# 1.0 Overview

------------------------------------------------------------------------

## 1.1 Background

## 1.2 Task

-   Choropleth Mapping and Analysis

-   Local Gi\* Analysis

-   Emerging Hot Spot Analysis (EHSA)

# 2.0 Setup

------------------------------------------------------------------------

## 2.1 Import Packages

-   sf - Used for handling geospatial data

-   tidyVerse - Used for data transformation and presentation

-   tmap, maptools, kableExtra - Used for visualizing dataframes and plots

-   spatstat - Used for point-pattern analysis

-   sfdep - Used for functions not in spdep

-   raster - Used to handle gridded spatial data

```{r}
pacman::p_load(sf, maptools, tmap, kableExtra, readxl, lubridate, tidyr, tidyverse)
```

# 3.0 Data Wrangling

------------------------------------------------------------------------

## 3.1 Datasets Used

| Type       | Name                                          |
|------------|-----------------------------------------------|
| Geopsatial | BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA |
| Aspatial   | DKI Jakarta Provincial Vaccination Open Data  |

## 3.2 Geospatial Data

### 3.2.1 Load Data

::: panel-tabset
#### Import

```{r}
bd_jakarta <- st_read(dsn="data/geospatial",
                      layer="BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA")
```

#### Glimpse

```{r}
glimpse(bd_jakarta)
```

#### View

```{r}
plot(st_geometry(bd_jakarta))
```
:::

### 3.2.2 Data Preprocessing

#### 3.2.2.1 Invalid Geometries

```{r}
length(which(st_is_valid(bd_jakarta) == FALSE))
```

Everything is valid

#### 3.2.2.2 Exclude redundant fields

Exclude all data except Municipality, District name, District Code, Sub-district Code, Sub-district name, Total Population and geometry of the regions.

```{r}
bd_jakarta <- bd_jakarta %>%
  select(2:4, 6:7, 9,)
```

#### 3.2.2.3 Rename from Bahasa Indonesia to English

| Index | Original Name | Translated Name   |
|-------|---------------|-------------------|
| 2     | KODE_DESA     | Sub_District_Code |
| 3     | DESA          | Sub_District      |
| 4     | KODE          | District_Code     |
| 6     | KAB_KOTA      | Municipality      |
| 7     | KECAMATAN     | District          |
| 9     | JUMLAH_PEN    | Total_Population  |

```{r}
#| code-fold: true
bd_jakarta <- bd_jakarta %>% 
  dplyr::rename(
    Municipality=KAB_KOTA,
    District=KECAMATAN,
    District_Code=KODE,
    Sub_District=DESA,
    Sub_District_Code=KODE_DESA,
    Total_Population=JUMLAH_PEN
    )
```

#### 3.2.2.4 Handle Missing Values

```{r}
#| code-fold: true
cat("There are", sum(is.na(bd_jakarta)), "missing values in", paste(names(which(colSums(is.na(bd_jakarta))>0)), collapse = ", "))
```

**Remove all rows with missing values**

```{r}
bd_jakarta <- na.omit(bd_jakarta)
```

### 3.2.3 Transform Coordinate System

```{r}
st_crs(bd_jakarta)
```

Transform the CRS to DGN95, ESPG code 23845

::: panel-tabset
#### Transform

```{r}
bd_jakarta <- st_transform(bd_jakarta, 23845)
```

#### View {#view-1}

```{r}
st_crs(bd_jakarta)
```
:::

### 3.2.4 Remove outer islands

Based on first glance in [View](#view-1), there are several small islands surrounding the mainland. As this is not relevant to the analysis, they shall be omitted.

```{r}
# KEPULAUAN SERIBU means thousand islands
bd_jakarta <- filter(bd_jakarta, Municipality != "KEPULAUAN SERIBU")
```

### 3.2.5 Data Summary

```{r}
#| code-fold: true
c = length(unique(bd_jakarta$"Municipality"))
d = length(unique(bd_jakarta$"District"))
sd = length(unique(bd_jakarta$"Sub_District"))

cat("There are", c, "unique municipalities,", d, "unique districts, and", sd, "unique sub-districs")
```

#### 3.2.5.1 View distribution

::: panel-tabset
#### Districts per Municipality

```{r}
#| code-fold: true
df_grp_municipality = bd_jakarta %>% group_by(Municipality)  %>%
                    summarise(total_districts = n(),
                              .groups = 'drop')
                              
ggplot(df_grp_municipality, aes(x=Municipality, y=total_districts), fill=Municipality) + 
  geom_bar(stat = "identity",
           color="black",
           fill="lightblue4") + 
  ggtitle("Number of Districts by Municipality") +
  xlab("Municipality Name") +
  ylab("No. of Districts") 
```

#### Sub-districts per District

```{r}
#| code-fold: true
df_grp_districs = bd_jakarta %>% group_by(District)  %>%
                    summarise(total_sub_districts = n(),
                              .groups = 'drop')

ggplot(df_grp_districs, aes(x=District, y=total_sub_districts)) + 
  geom_bar(stat = "identity",
           color="black",
           fill="lightblue3") + 
  scale_x_discrete(guide = guide_axis(n.dodge=5))+
  ggtitle("Number of Sub-districts by District") +
  xlab("District Name") +
  ylab("No. of Sub-districts") 
```
:::

#### 3.2.5.2 View by Municipality Divisions

```{r}
tm_shape(bd_jakarta) + 
  tm_polygons("Municipality")
```

#### 3.2.5.2 View by Population

::: panel-tabset
#### Distribution

```{r}
ggplot(bd_jakarta, aes(x=Total_Population)) + 
  geom_histogram(bins = 10,
                color="black",
                fill="indianred")
```

#### Map

Equal Interval Classification

```{r}
#| code-fold: true
tmap_mode("plot")
tm_shape(bd_jakarta) + 
  tm_fill("Total_Population",
          style = "equal",
          palette = "OrRd") + 
  tm_layout(main.title = "Distribution by Population") + 
  tm_borders(alpha = 0.5) 
```
:::

## 3.3 Aspatial Data

### 3.3.1 Load Data

All files were downloaded as "Data Vaksinasi Berbasis Kelurahan (\<last date of month\> \<Indonesian month name\> \<year\>).xlsx" were locally renamed as "\<last date of month\> \<English month name\> \<year\>.xlsx"

```{r}
#get list of aspatial data files
folder_path <- "data/aspatial"
files <- list.files(folder_path, pattern = ".xlsx", full.names = TRUE)
```

```{r}
#combines files into vacc_df
vacc_df <- data.frame()

for (file in files) {
  data <- read_excel(file, sheet = "Data Kelurahan") #sub-district
  data$Date <- dmy(str_extract(file, "\\d{2} [[:alpha:]]+ \\d{4}")) #add date column
  vacc_df <- bind_rows(vacc_df, data)
}
```

### 3.3.2 Data Preprocessing

#### 3.3.2.1 Exclude redundant fields

Exclude all values except Municipality name, Sub-district name, Sub-district code, Target number, Number not yet vaccinated, Total vaccines administered and Date.

```{r}
vacc_df <-  vacc_df %>%
  select(1:2, 4:6, 9, 28)
```

#### 3.3.2.2 Rename from Bahasa Indonesia to English

| Index | Original Name          | Translated Name            |
|-------|------------------------|----------------------------|
| 1     | KODE KELURAHAN         | Sub_District_Code          |
| 2     | WILAYAH KOTA           | Municipality               |
| 4     | KELURAHAN              | Sub_District               |
| 5     | SANSARAN               | Target                     |
| 6     | BELUM VAKSIN           | Not_Yet_Vaccinated         |
| 9     | TOTAL VAKSIN DIBERIKAN | Total_Vaccine_Administered |

```{r}
#| code-fold: true
vacc_df <- vacc_df %>% 
  dplyr::rename(
    Municipality="WILAYAH KOTA",
    Sub_District="KELURAHAN",
    Sub_District_Code="KODE KELURAHAN",
    Target="SASARAN", 
    Not_Yet_Vaccinated="BELUM VAKSIN", 
    Total_Vaccine_Administered="TOTAL VAKSIN\r\nDIBERIKAN"
    )
```

#### 3.3.2.3 Handle Missing Values

```{r}
#| code-fold: true
cat("There are", sum(is.na(vacc_df)), "missing values in", paste(names(which(colSums(is.na(vacc_df))>0)), collapse = ", "))
```

Remove all rows with missing values

```{r}
vacc_df <- na.omit(vacc_df)
```

### 3.3.3 Remove outer islands

```{r}
vacc_df <- filter(vacc_df, Municipality != "KAB.ADM.KEP.SERIBU")
```

Remove column Municipality as there is no further need for it in this data frame

```{r}
vacc_df = vacc_df[,!(names(vacc_df) %in% "Municipality")]
```

## 3.4 Combined Data Wrangling

### 3.4.1 Join vaccination data

```{r}
df <- left_join(bd_jakarta, vacc_df,
         by=c("Sub_District_Code"="Sub_District_Code",
              "Sub_District"="Sub_District"))
```

**Visualise**

```{r}
#| code-fold: true
p1 = tm_shape(df)+
  tm_fill("Target") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Target")
  
p2 = tm_shape(df)+
  tm_fill("Total_Vaccine_Administered") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Total Vaccines Administered")


tmap_arrange(p1, p2)
```

While Target and Total Vaccines Administered seem highly correlated, there several grey Missing patches which will be addressed below

### 3.4.2 Standardise Data

Although missing values from the geospatial and aspatial data have already been omitted, there is a "Missing" data in the above visualisation. This is because there are discrepancies between the sub-district names in the two datasets.

**View Discrepancies**

```{r}
#| code-fold: true
cases_subdistrict <- c(vacc_df$Sub_District)
bd_subdistrict <- c(bd_jakarta$Sub_District)

aspatial_list <- sort(unique(cases_subdistrict[!(cases_subdistrict %in% bd_subdistrict)]))
aspatial_list <- c(aspatial_list[1:3], aspatial_list[6], aspatial_list[5], aspatial_list[7:9], aspatial_list[4]) #rearrgane - hardcoded

geospatial_list <- sort(unique(bd_subdistrict[!(bd_subdistrict %in% cases_subdistrict)]))


spelling <- data.frame(
  Aspatial_Cases=aspatial_list,
  Geospatial_BD=geospatial_list
  )

# with dataframe a input, outputs a kable
library(knitr)
library(kableExtra)
kable(spelling, caption="Mismatched Records") %>%
  kable_material("hover", latex_options="scale_down")
```

**Rename geospatial data with aspatial data values**

```{r}
for (i in 1:9) {
  bd_jakarta$Sub_District[bd_jakarta$Sub_District == geospatial_list[i]] <- aspatial_list[i]
}

rm(aspatial_list, geospatial_list, i) #cleanup
```

### 3.4.3 Join vaccination data (again)

```{r}
df <- left_join(bd_jakarta, vacc_df,
        by=c("Sub_District_Code"="Sub_District_Code",
              "Sub_District"="Sub_District"))
```

**Visualise**

```{r}
#| code-fold: true
p1 = tm_shape(df)+
  tm_fill("Target") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Target")
  
p2 = tm_shape(df)+
  tm_fill("Total_Vaccine_Administered") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Total Vaccines Administered")


tmap_arrange(p1, p2)
```

Grey Missing data from 3.4.1 has been handled.

# 4.0 Choropleth Mapping

------------------------------------------------------------------------

## 4.1 Compute Vaccination Rates

$$ \mathrm Vaccination \ Rate = \frac{\mathrm Target \ - \ (\mathrm Not \ Vaccinated) \ }{\mathrm Target} \ * 100
$$

$Target \ has \ been \ chosen \ over \ total \ population \ to \ exclude \ people \ who \ are \ not \ required \ to \ be \ vaccinated$

Add Vaccination Rate column to main dataframe (df)

```{r}
df <- df %>%
  mutate(vaccination_rate = ((Target-Not_Yet_Vaccinated)/Target)*100)
```

Create table vacc_rate_df that groups vaccination rate by sub-district and date

```{r}
vacc_rate_df <- df %>%
  st_drop_geometry  %>% #remove geometry for pivot
  group_by(Sub_District, Date) %>%
  summarise(vaccination_rate) %>%
  
  ungroup() %>% 
  pivot_wider(names_from = Date, #use pivot table to rearrange
              values_from = vaccination_rate) %>%
  
  left_join(bd_jakarta, by=c("Sub_District"="Sub_District")) #add geometry back
```

**View**

```{r}
head(vacc_rate_df)
```

Convert to sf object for plotting

```{r}
vacc_rate_df <- st_as_sf(vacc_rate_df)
```

## 4.2 Visualise monthly vaccination rates

```{r}
#| code-fold: true
#helper function for plots
#Can use fisher too


plot <- function(varname) {
  tm_shape(vacc_rate_df) +
    tm_polygons() +
  tm_shape(vacc_rate_df) +
    tm_fill(varname, 
          n= 6,
          style = "jenks", 
          palette="RdPu",
          title = "Vaccination Rate (%)") +
    tm_layout(main.title = paste("Vaccination rate by", paste(month(ymd(varname), label=TRUE), year(ymd(varname)))),
          main.title.position = "center",
          frame = TRUE) +
    tm_borders(alpha = 0.5)
}
```

**Plot**

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(plot("2021-07-31"), plot("2021-08-31"), plot("2021-09-30"),plot("2021-10-31"))
```

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(plot("2021-11-30"), plot("2021-12-31"), plot("2022-01-31"), plot("2022-02-27"))

```

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(plot("2022-03-31"), plot("2022-04-30"), plot("2022-05-31"), plot("2022-06-30"))
```

The vaccination rate increases over the year for all regions. The municipality / districts xxx start with the highest vaccination rates then other regions like xxx catch up.

## 4.3 Observations from Jenks based Mapping

### 4.3.1 Vaccination Rates by Sub-district

**For lowest vaccination rates,**

```{r}
#| code-fold: true
#temporary dataset
temp_low <- df %>%
  group_by(Date) %>%
  filter(vaccination_rate == min(vaccination_rate)) %>% 
  arrange(Date)

#plot
ggplot(temp_low, aes(x=Date, y=vaccination_rate)) +
  geom_point(aes(color=temp_low$Sub_District)) + 
  ggtitle("Lowest Vaccination Rates over the Year by Sub-district")
```

Not only does the minimum vaccination rate increase over year, but the sub-district Bale Kambang has a sharp increase in its rate and no longer has the lowest vaccination rate by July 2022.

**For highest vaccination rates,**

```{r}
#| code-fold: true
#temporary dataset
temp_high <- df %>%
  group_by(Date) %>%
  filter(vaccination_rate == max(vaccination_rate)) %>% 
  arrange(Date)

#plot
ggplot(temp_high, aes(x=Date, y=vaccination_rate)) +
  geom_point(aes(color=temp_high$Sub_District)) + 
  ggtitle("Highest Vaccination Rates over the Year by Sub-district")
```

The sub-district Halim Perdana Kusumah has the highest vaccination rate for the most part.

The vaccination rate by July 31, 2021 for this sub-district at 72.08% is much higher than that of Bale Kambang which was at 48.23%. This difference of 23.85% gets smoothed down to 8.77% by June 30, 2022.

```{r}
temp <- data.frame(temp_low$Date, temp_low$vaccination_rate, temp_high$vaccination_rate) 

colors <- c("Lowest" = "orange", "Highest" = "steelblue")

ggplot(temp, aes(x=temp_low.Date)) + 
  geom_line(aes(y=temp_low.vaccination_rate, color="Lowest"), size = 1.2) + 
  geom_line(aes(y=temp_high.vaccination_rate, color="Highest"), size = 1.2) + 
  ggtitle("Highest and Lowest Vaccination Rates over the Year by Sub-district") + 
  labs(y = "Vaccination Rate (%)",
      color = "Vaccination Rate") +
  scale_color_manual(values = colors)
```

### 4.3.2 Spatio-Temporal Mapping with custom breakpoints

View how the vaccination rate increases in all regions over the year based on Jenks defined breakpoints.

With the lowest and highest vaccination rates over the year being 48.23% and 91.87%, the Jenks breakpoints are defined as follows

```{r}
breakpoints = c(48, 65, 72, 82, 86, 92)
```

```{r}
#| code-fold: true
#helper function for plotting
plot <- function(varname) {
  tm_shape(vacc_rate_df) +
    tm_polygons() +
  tm_shape(vacc_rate_df) +
    tm_fill(varname, 
          breaks= breakpoints,
          palette="RdPu",
          title = "Vaccination Rate") +
    tm_layout(main.title = paste("Vaccination rate by", paste(month(ymd(varname), label=TRUE), year(ymd(varname)))),
          main.title.position = "center",
          frame = TRUE) +
    tm_borders(alpha = 0.5)
}
```

**Plot**

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(plot("2021-07-31"), plot("2021-08-31"), plot("2021-09-30"),plot("2021-10-31"))
```

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(plot("2021-11-30"), plot("2021-12-31"), plot("2022-01-31"), plot("2022-02-27"))

```

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(plot("2022-03-31"), plot("2022-04-30"), plot("2022-05-31"), plot("2022-06-30"))
```

\-\-\-\-\-\-\-\-\-\-\-\-\--

At the beginning, low rates in xxx, rates are good now.

During xxx months, they increased a bit more

# 5.0 Local Gi\* Analysis

------------------------------------------------------------------------

-   Compute local Gi\* values of the monthly vaccination rate,

-   Display the Gi\* maps of the monthly vaccination rate. The maps should only display the significant (i.e. p-value \< 0.05)

-   With reference to the analysis results, draw statistical conclusions (not more than 250 words).

## 5.1 Compute Gi\* values

To create a time series cube, we first have to make an attribute table with the data organised in the following format: Date, Location (`Sub_District`) and Value (`Vaccination_Rate`)

Making an attribute table:

```{r}
# make new vaccination attribute table with Date, Sub_District, Target, Not_Yet_Vaccinated
vacc_attribute_table <- combined_jakarta %>% select(10, 8, 12, 13) %>% st_drop_geometry()

# add a new field for Vaccination_Rate
vacc_attribute_table$Vaccination_Rate <- (vacc_attribute_table$Target - vacc_attribute_table$Not_Yet_Vaccinated) / vacc_attribute_table$Target*100

# final vaccination attribute table with Date, Sub_District, Vaccination_Rate
vacc_attribute_table <- tibble(vacc_attribute_table %>% select(1,2,5))
```

Creating a time series cube (spatio-temporal cube) using `spacetime()` of sfdep package:

```{r}
vacc_rate_st <- spacetime(vacc_attribute_table, bd_jakarta,
                          .loc_col = "Sub_District",
                          .time_col = "Date")
```

Next, we can check if `vacc_rate_st` is indeed a space-time cube object using `is_spacetime_cube()` of sfdep package

```{r}
is_spacetime_cube(vacc_rate_st)
```

Derive spatial weights

```{r}
vacc_rate_nb <- vacc_rate_st %>%
  activate("geometry") %>%
  mutate(nb = include_self(st_contiguity(geometry)),
         wt = st_inverse_distance(nb, geometry,
                                  scale=1,
                                  alpha=1),
         .before=1) %>%
  set_nbs("nb") %>%
  set_wts("wt")
```

The above code does the following:

-   identify neighbours

-   derive inverse distance weights

-   `activate()` of dplyr package is used to activate the geometry context

-   `mutate()` of dplyr package is used to create two new columns nb and wt.

-   Then we will activate the data context again and copy over the nb and wt columns to each time-slice using `set_nbs()` and `set_wts()`

-   row order is very important so do not rearrange the observations after using `set_nbs()` or `set_wts()`.

The dataset now has neighbours and weights for each time-slice:

```{r}
head(vacc_rate_nb)
```

Set seed

```{r}
set.seed(1234)
```

Compute

```{r}
gi_stars <- vacc_rate_nb |>
  group_by(Date) |>
  mutate(gi_star = local_gstar_perm(
    Vaccination_Rate, nb, wt, nsim=99)) |>
      tidyr::unnest(gi_star)
```

## 5.2 Displaying the Gi\* maps of the monthly vaccination rate

Before we can visualise the Gi\* values using maps, we need to join both `combined_jakarta` and `gi_stars` together:

```{r}
combined_jakarta_gi_stars <- combined_jakarta %>%
  left_join(gi_stars)
```

Visualising Gi\* and p-value of Gi\* (only significant locations where p-value \< 0.05) for vaccination rates in July 2021:

```{r}
tmap_mode("plot")
gi_star_map = tm_shape(filter(combined_jakarta_gi_stars, Date == '2021-07-31')) +
  tm_fill("gi_star") +
  tm_borders(alpha=0.5) +
  tm_layout(main.title = "Gi* values for vaccination rates in July 2021", main.title.size=0.8)
  # tm_view(set.zoom.limits = c(10,16))

p_sim_map = tm_shape(filter(combined_jakarta_gi_stars, Date == '2021-07-31')) +
  tm_fill("p_sim", breaks = c(0, 0.05, 1)) +
  tm_borders(alpha=0.5) + 
  tm_layout(main.title = "p-values of Gi* for vaccination rates in July 2021", main.title.size=0.8)
  # tm_view(set.zoom.limits = c(10,16))

tmap_arrange(gi_star_map, p_sim_map)
```

Introducing a helper function to help us plot the Gi\* and p-value of Gi\* maps for all 12 months:

```{r}
gi_star_plot <- function(date, month) {
  gi_star_map = tm_shape(filter(combined_jakarta_gi_stars, Date == date)) +
    tm_fill("gi_star") +
    tm_borders(alpha=0.5) +
    tm_layout(main.title = paste("Gi* values for vaccination rates in", month), main.title.size=0.8)

  p_sim_map = tm_shape(filter(combined_jakarta_gi_stars, Date == date)) +
    tm_fill("p_sim", breaks = c(0, 0.05, 1)) +
    tm_borders(alpha=0.5) + 
    tm_layout(main.title = paste("p-values of Gi* for vaccination rates in", month), main.title.size=0.8)

  tmap_arrange(gi_star_map, p_sim_map)
}
```

(repeat 12 times)

```{r}
tmap_mode("plot")
gi_star_plot("2021-07-31", "July 2021")
```

up to

```{r}
gi_star_plot("2022-06-30", "June 2022")
```

Locations with p-value of Gi\* \< 0.05 in month xx

```{r}
get_significant_locations <- function(date, month) {
  print(paste("Sub-Districts with p-value of Gi* < 0.05 in", month))
  filter(combined_jakarta_gi_stars, Date == date & p_sim<0.05)$Sub_District
}
```

```{r}
get_significant_locations("2021-07-31", "July 2021")
```

Do for all months

Below is a table that summarises the number of times the p-value of Gi\* was less than 0.05 for the respective Sub-Districts in the 12 months period (this table only shows the Sub-Districts with a significant p-value for at least 1 month):

```{r}
# num_of_times = filter(combined_jakarta_gi_stars, p_sim<0.05)
# as.data.frame(table(num_of_times$Sub_District))
```

## 5.3 Statistical conclusions

For the Sub-Districts with p-value of Gi\* \< 0.05, the Gi\* values of the monthly vaccination rates of these locations are significant.

Throughout the 12 months, there were 128 Sub-Districts with at least 1 month of having a significant Gi\* value.

The Gi\* value of the vaccination rates for all 12 months were significant for Sub-Districts "BATU AMPAR", "CIPINANG CEMPEDAK", "GLODOK", "KAMPUNG BALI", "KAMPUNG TENGAH", "KEAGUNGAN", "KEBON KACANG", "KEBON MELATI", "MANGGA BESAR", "PETAMBURAN". This means that the vaccination rates for 12 months for these Sub-Districts were either significantly high or low.

# 5.0 Emerging Hot Spot Analysis (EHSA)

## 5.1 Mann-Kendall Test

In this section, we will perform the Mann-Kendall Test using the spatio-temporal local Gi\* values on 3 Sub-Districts.

### 5.1.1 Sub-District 1 - "HALIM PERDANA KUSUMAH"

Firstly, on Sub-District "HALIM PERDANA KUSUMAH":

```{r}
cbg <- gi_stars |>
  ungroup() |>
  filter(Sub_District == "HALIM PERDANA KUSUMAH") |>
  select(Sub_District, Date, gi_star)
```

Plot

```{r}
ggplot(data = cbg,
       aes(x = Date,
           y = gi_star)) + 
  geom_line() + 
  theme_light()

#ggplotly(p) <- for interactive
```

p-value of Mann Kendall Test:

```{r}
cbg %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>% 
  tidyr::unnest_wider(mk)
```

The p-value is 0.08 which is \> 0.05 hence p-value is not significant. This result tells us that here is an overall upward but insignificant trend.

\
Repeat for a few sub-districts.

## 5.2 EHSA map of the Gi\* values of the vaccination rate

To find out the significant emerging hot/cold spots, we would need to perform the Mann Kendall Test for each location. We can use `group_by()` of dplyr package:

```{r}
ehsa <- gi_stars %>%
  group_by(Sub_District) %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>%
  tidyr::unnest_wider(mk)
```

Arrange to show significant emerging hot/cold spots:

```{r}
emerging <- ehsa %>% 
  arrange(sl, abs(tau)) %>% 
  slice(1:5)
emerging
```

Performing Emerging Hotspot Analysis using `emerging_hotspot_analysis()` of sfdep package:

```{r}
ehsa <- emerging_hotspot_analysis(
  x = vacc_rate_st,
  .var = "Vaccination_Rate",
  k = 1,
  nsim = 99
)
```

Notes:

-   It takes a spacetime object x (i.e. varr_rate_st)

-   and the quoted name of the variable of interest (i.e. Vaccination_Rate) for .var argument

-   k argument is used to specify the number of time lags which is set to 1 by default

-   nsim map numbers of simulation to be performed

Visualisation of the distribution of EHSA classes using ggplot2 functions:

```{r}
ggplot(data = ehsa,
       aes(x=classification, fill=classification)) + 
  geom_bar()
```

The figure shows that the oscillating hot spot class has the highest number of Sub-Districts.

Before we can visualise the geographic distribution of the EHSA classes, we need to join `combined_jakarta` and `ehsa` together:

```{r}
combined_jakarta_ehsa <- combined_jakarta %>%
  left_join(ehsa, by = c("Sub_District" = "location"))
```

Next, we can plot a categorical choropleth map for the significant locations using tmap functions:

```{r}
# this adds a new column "NewClassification" so that we can include a class called "insignificant" in our plot
combined_jakarta_ehsa <- combined_jakarta_ehsa %>% mutate(NewClassification = 
                                                            case_when(p_value < 0.05 ~ classification,
                                                                      p_value >= 0.05 ~ "insignificant"))
```

```{r}
tmap_mode("plot")
tm_shape(combined_jakarta_ehsa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(combined_jakarta_ehsa) +
  tm_fill("NewClassification",
          palette = c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")) + 
  tm_borders(alpha = 0.4)
```

### 5.2.1 Observations of the spatial patterns

Among the significant places, there is the greatest number of locations classified as oscillating hotspot, followed by sporadic coldspot, oscillating coldspot, and no pattern detected.

The oscillating hotspots are spread out almost evenly in the whole of Jakarta.

The sporadic coldspots are spread out slightly less evenly than the oscillating hotspots as the borders are not covered as much.

The oscillating coldspots seem to be around the Southern, Western and Central area.

Lastly, the areas where no patterns are detected seem to be mainly in the Central area.

The areas where the patterns are insignificant appears to be mostly at the Central area and a little at the Western and Southern area.

# 6.0 Acknowledgements

------------------------------------------------------------------------

I'd like to thank Professor Kam for his insights and resource materials provided under IS415 Geospatial Analytics and Applications.
