---
title: "Take Home Exercise 2"
date: "18 February 2023"
date-modified: "`r Sys.Date()`"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# 1.0 Overview

------------------------------------------------------------------------

## 1.1 Background

## 1.2 Task

-   Choropleth Mapping and Analysis

-   Local Gi\* Analysis

-   Emerging Hot Spot Analysis (EHSA)

# 2.0 Setup

------------------------------------------------------------------------

## 2.1 Import Packages

-   sf - Used for handling geospatial data

-   tidyVerse - Used for data transformation and presentation

-   tmap, maptools, kableExtra - Used for visualizing dataframes and plots

-   spatstat - Used for point-pattern analysis

-   sfdep - Used for functions not in spdep

-   raster - Used to handle gridded spatial data

```{r}
pacman::p_load(sf, maptools, tmap, kableExtra, readxl, lubridate, tidyverse)
```

# 3.0 Data Wrangling

------------------------------------------------------------------------

## 3.1 Datasets Used

| Type        | Name                                          |
|-------------|-----------------------------------------------|
| Geopsatial  | BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA |
| Aspatial    | DKI Jakarta Provincial Vaccination Open Data  |

```{r}
#| code-fold: true
# initialise a dataframe of our geospatial and aspatial data details
datasets <- data.frame(
  Type=c("Geospatial",
         "Aspatial"),
  Name=c("[Batas Desa Provinsi DKI Jakarta](https://www.indonesia-geospasial.com/2020/04/download-shapefile-shp-batas-desa.html)",
         "[Standar Kelurahan Data Corona (Monthly)](https://riwayat-file-covid-19-dki-jakarta-jakartagis.hub.arcgis.com/)"),
  Format=c("Shapefile", 
           ".xlsx"),
  Description=c("Sub-districts in DKI Jakarta",
                "Sub-district level data of daily COVID-19 cases in DKI Jakarta  
                between March 2020~July 2021")
  )

# with reference to this guide on kableExtra:
# https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html
# kable_material is the name of the kable theme
# 'hover' for to highlight row when hovering, 'scale_down' to adjust table to fit page width
library(knitr)
library(kableExtra)
kable(head(datasets), caption="Datasets Used") %>%
  kable_material("hover", latex_options="scale_down")

#cleanup
rm(datasets)
```

## 3.2 Geospatial Data

### 3.2.1 Load Data

Import Geospatial data and filter out Osun State. Transform WGS 48 coordinate system to projected coordinate system with Nigeria's ESPG - 26293

::: panel-tabset
#### Import

```{r}
bd_jakarta <- st_read(dsn="data/geospatial",
                      layer="BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA")
```

#### Glimpse

```{r}
glimpse(bd_jakarta)
```

#### View

```{r}
plot(st_geometry(bd_jakarta))
```
:::

### 3.2.2 Data Preprocessing

#### 3.2.2.1 Invalid Geometries

```{r}
length(which(st_is_valid(bd_jakarta) == FALSE))
```

Everything is valid

#### 3.2.2.2 Exclude redundant fields

Exclude all data except Object ID, Village Code, Village name, Code, Province, City District, Sub-district, Kelur Village, Total Population and geometry of the regions.

**\-\-- Remove province as there is only one \-\--**

```{r}
bd_jakarta <- bd_jakarta [, 0:9]
```

#### 3.2.2.3 Rename from Bahasa Indonesia to English

| Index | Original Name | Translated Name        |
|-------|---------------|------------------------|
| 1     | OBJECT_ID     | Object_ID (no need???) |
| 2     | KODE_DESA     | Village_Code           |
| 3     | DESA          | Village                |
| 4     | KODE          | Code                   |
| 5     | PROVINSI      | Province               |
| 6     | KAB_KOTA      | City                   |
| 7     | KECAMATAN     | District               |
| 8     | DESA_KELUR    | Sub_District           |
| 9     | JUMLAH_PEN    | Total_Population       |

```{r}
#| code-fold: true
bd_jakarta <- bd_jakarta %>% 
  dplyr::rename(
    Object_ID=OBJECT_ID,
    Province=PROVINSI, #province
    City=KAB_KOTA, #city district
    District=KECAMATAN, #sub district 
    Village_Code=KODE_DESA, #village code
    Village=DESA, #village name 
    Sub_District=DESA_KELUR,#village kelur
    Code=KODE, #code
    Total_Population=JUMLAH_PEN #num pens
    )
```

#### 3.2.2.4 Handle Missing Values

```{r}
bd_jakarta[rowSums(is.na(bd_jakarta))!=0,]
```

There are 9 missing values.

**Remove all rows with missing values**

```{r}
bd_jakarta <- na.omit(bd_jakarta)
```

### 3.2.3 Transform Coordinate System

```{r}
st_crs(bd_jakarta)
```

Transform the CRS to DGN95, ESPG code 23845

```{r}
bd_jakarta <- st_transform(bd_jakarta, 23845)

st_crs(bd_jakarta)
```

### 3.2.4 Remove outer islands

Based on first glance in [View], there are several small islands surrounding the mainland. As this is not relevant to the analysis, they shall be omitted.

```{r}
# KEPULAUAN SERIBU means thousand islands
bd_jakarta <- filter(bd_jakarta, City != "KEPULAUAN SERIBU")
```

### 3.2.5 Data Summary

```{r}
#| code-fold: true
c = length(unique(bd_jakarta$"City"))
d = length(unique(bd_jakarta$"District"))
sd = length(unique(bd_jakarta$"Sub_District"))

cat("There are", c, "unique cities,", d, "unique districts, and", sd, "unique sub-districs")

rm(c,d,sd)
```

There a 5 unique cities, 42 unique districts and 261 unique sub-districts.

#### 3.2.5.1 View distribution 

::: panel-tabset
#### Districts per City

```{r}
#| code-fold: true
df_grp_cities = bd_jakarta %>% group_by(City)  %>%
                    summarise(total_districts = n(),
                              .groups = 'drop')
```

```{r}
#| code-fold: true
ggplot(df_grp_cities, aes(x=City, y=total_districts), fill=City) + 
  geom_bar(stat = "identity",
           color="black",
           fill="lightblue4") + 
  ggtitle("Number of Districts by City") +
  xlab("City Name") +
  ylab("No. of Districts") 

#cleanup  
rm(df_grp_cities)
```

#### Sub-districts per District

```{r}
#| code-fold: true
df_grp_districs = bd_jakarta %>% group_by(District)  %>%
                    summarise(total_sub_districts = n(),
                              .groups = 'drop')
```

```{r}
#| code-fold: true
ggplot(df_grp_districs, aes(x=District, y=total_sub_districts)) + 
  geom_bar(stat = "identity",
           color="black",
           fill="lightblue3") + 
  scale_x_discrete(guide = guide_axis(n.dodge=2))+
  ggtitle("Number of Sub-districts by District") +
  xlab("District Name") +
  ylab("No. of Sub-districts") 

#cleanup  
rm(df_grp_districs)
```
:::

#### 3.2.5.2 View by City Divisions

```{r}
tm_shape(bd_jakarta) + 
  tm_polygons("City")
```

#### 3.2.5.2 View by Population

::: panel-tabset
#### Distribution

```{r}
ggplot(bd_jakarta, aes(x=Total_Population)) + 
  geom_histogram(bins = 10,
                color="black",
                fill="indianred")
```

#### Map

Quantile Classification

```{r}
#| code-fold: true
tmap_mode("plot")
tm_shape(bd_jakarta) + 
  tm_fill("Total_Population",
          style = "quantile",
          palette = "OrRd") + 
  tm_layout(main.title = "Distribution by Population") + 
  tm_borders(alpha = 0.5) 
```
:::

## 3.3 Aspatial Data

### 3.3.1 Load Data

All files were downloaded as "Data Vaksinasi Berbasis Kelurahan (\<last date of month\> \<Indonesian month name\> \<year\>).xlsx" were locally renamed as "\<last date of month\> \<English month name\> \<year\>.xlsx"

```{r}
#get list of aspatial data files
folder_path <- "data/aspatial"
files <- list.files(folder_path, pattern = ".xlsx", full.names = TRUE)
```

```{r}
#combines files into vacc_df
vacc_df <- data.frame()

for (file in files) {
  sheet_name <- "Data Kelurahan"
  date <- dmy(str_extract(file, "\\d{2} [[:alpha:]]+ \\d{4}"))
  data <- read_excel(file, sheet = "Data Kelurahan")
  data$date <- date
   vacc_df <- bind_rows( vacc_df, data)
}

rm(data) #cleanup
```

### 3.3.2  Data Preprocessing

#### 3.3.2.1 Exclude redundant fields

```{r}
vacc_df <-  vacc_df %>%
  select(1:6, 28)
```

#### 3.3.2.2 Rename from Bahasa Indonesia to English

| Index | Original Name  | Translated Name            |
|-------|----------------|----------------------------|
| 1     | ID             | ID                         |
| 2     | Name_provinsi  | Province                   |
| 3     | name_kota      | City                       |
| 4     | nama_kecamatan | District                   |
| 5     | nama_kelurahan | Sub-District               |
| 6     | Meninggal      | Cumulative Death Cases     |
| 7     | POSITIF        | Cumulative Confirmed Cases |
| 8     | Date           | Date                       |

```{r}
#| code-fold: true
vacc_df <- vacc_df %>% 
  dplyr::rename(
    Family_Code = "KODE KELURAHAN",
    City = "WILAYAH KOTA",
    District=KECAMATAN, 
    Sub_District= KELURAHAN,
    Target=SASARAN, 
    Yet_to_be_Vaccinated="BELUM VAKSIN",
    )
```

#### 3.3.2.3 Handle Missing Values

```{r}
vacc_df[rowSums(is.na(vacc_df))!=0,]
```

Remove all rows with Family Code missing ---why?\--

```{r}
vacc_df <- na.omit(vacc_df,c("Family_code"))
```

## 3.4 Combined Data Wrangling

### 3.4.1 Join vaccination data

```{r}
df <- left_join(bd_jakarta, vacc_df,
                              by=c("Sub_District"="Sub_District"))
```

### 3.3.4 Join with geospatial data

```{r}
unique(df$city_region)
```

```{r}
df <- df|> 
   filter(city_region != "KAB.ADM.KEP.SERIBU")


unique(df$city_region) 
```

## 3.4 Combined Data Wrangling

```{r}
combined_df <- left_join(df, geoJAR, by = c("village_code" = "Village_Code")) |> 
  st_as_sf()

class(combined_df)
```

```{r}
combined_df<- combined_df |>
  mutate(date=as.factor(date))
```

# 4.0 Choropleth Mapping

```{r}
ls<-list("Juli ", "Agustus", "September", "Oktober", "November", "Desember", "Januari", "Februari", "Maret", "April", "Mei", "Juni")
```

```{r}
plot<-function(dataframe, title){
  tmap_mode("plot")
tm_shape(filter(combined_df, date %in% dataframe)) +
  tm_fill("vaccination_rate",
          n= 6,
          style = "jenks",
          palette="Blues")+
  tm_borders(alpha = 0.5) +
  tm_layout(main.title= title, 
            main.title.position="center",
            main.title.size=1.2,
            legend.height=0.45,
            legend.width = 0.35,
            frame=TRUE)+
    tm_scale_bar()+
    tm_grid(alpha=0.2)
}
plot("July 2021", "Vaccination rate in July 2021")
```

```{r}
tmap_mode("plot")
tmap_arrange(plot("Juli", "Vaccination rate in July 2021"),
             plot("Agustus", "Vaccination rate in August 2021"),
             plot("September", "Vaccination rate in September 2021"),
             plot("Oktober", "Vaccination rate in October 2021"),
             plot("November", "Vaccination rate in November 2021"),
             plot("Desember", "Vaccination rate in December 2021"),
             plot("Januari", "Vaccination rate in January 2022"),
             plot("Februari", "Vaccination rate in February 2022"),
             plot("Maret", "Vaccination rate in March 2022"),
             plot("April", "Vaccination rate in April 2022"),
             plot("Mei", "Vaccination rate in May 2022"),
             plot("Juni", "Vaccination rate in Jun3 2022"))
```

```{r}
library(shiny)
library(tmap)

date <- c("Juli ", "Agustus", "September", "Oktober", "November", "Desember", "Januari", "Februari", "Maret", "April", "Mei", "Juni")

# Define the UI
ui <- fluidPage(
  selectInput(
    "date",
    label="pick a month",
    choices=date,
    selected="July 2021",
    multiple=FALSE
  ),
  # Create a tmap output element
  tmapOutput("my_map")
)

# Define the server
server <- function(input, output) {
  # Render the tmap in the output element
  output$my_map <- renderTmap({
    df<- combined_df |> 
      filter(date %in% input$date)
    # Create the tmap
    tm_shape(df) +
  tm_fill("vaccination_rate",
          style="quantile",
          palette="Blues")
  })
}

# Run the app
shinyApp(ui, server)
```

# 5.0 Local Gi\* Analysis

Filter

```{r}
filtered<-combined_df |> 
  filter(date=="July 2021")
```

## 5.1 Compute contiguity weights: Queen's method

```{r}
wm_q <- filtered |> 
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
```

## 5.2 Deriving fixed distance weights

```{r}
geo <- sf::st_geometry(filtered)
nb <- st_knn(geo, longlat = TRUE)
dists <- unlist(st_nb_dists(geo, nb))
```

```{r}
sum_dists<-summary(dists)
```

## 5.3 Compute fixed distance weights

```{r}
wm_fd <- filtered %>%
  mutate(nb = st_dist_band(geometry,
                           upper = 3600
                             ),
               wt = st_weights(nb),
               .before = 1)
```

## 5.4 Create function

## 5.5 Local Spatial Autocorrelation

## 5.6 Compute local moran's I

```{r}
filtered
```

```{r}
fips <- order(wm_fd$village_code)
localMI <- local_moran(wm_fd$vaccination_rate,
                       wm_fd$nb, 
                       wm_fd$wt)
head(localMI)
```

## 5.7 Print results in a list

```{r}
head(printCoefmat(data.frame(
  localMI[fips,], 
  row.names=combined_df$village_code[fips]),
  check.names=FALSE))
```

## 5.8 Map the local Moran's I

```{r}

```
