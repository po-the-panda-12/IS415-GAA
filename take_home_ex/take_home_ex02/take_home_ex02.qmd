---
title: "Take Home Exercise 2"
date: "18 February 2023"
date-modified: "`r Sys.Date()`"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# 1.0 Overview

------------------------------------------------------------------------

## 1.1 Background

## 1.2 Task

-   Choropleth Mapping and Analysis

-   Local Gi\* Analysis

-   Emerging Hot Spot Analysis (EHSA)

# 2.0 Setup

------------------------------------------------------------------------

## 2.1 Import Packages

-   sf - Used for handling geospatial data

-   tidyVerse - Used for data transformation and presentation

-   tmap, maptools, kableExtra - Used for visualizing dataframes and plots

-   spatstat - Used for point-pattern analysis

-   sfdep - Used for functions not in spdep

-   raster - Used to handle gridded spatial data

```{r}
pacman::p_load(sf, maptools, tmap, kableExtra, readxl, lubridate, tidyr, tidyverse)
```

# 3.0 Data Wrangling

------------------------------------------------------------------------

## 3.1 Datasets Used

| Type        | Name                                          |
|-------------|-----------------------------------------------|
| Geopsatial  | BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA |
| Aspatial    | DKI Jakarta Provincial Vaccination Open Data  |

## 3.2 Geospatial Data

### 3.2.1 Load Data

Import Geospatial data and filter out Jakarta. Transform WGS 48 coordinate system to projected coordinate system with Nigeria's ESPG - 26293

::: panel-tabset
#### Import

```{r}
bd_jakarta <- st_read(dsn="data/geospatial",
                      layer="BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA")
```

#### Glimpse

```{r}
glimpse(bd_jakarta)
```

#### View

```{r}
plot(st_geometry(bd_jakarta))
```
:::

### 3.2.2 Data Preprocessing

#### 3.2.2.1 Invalid Geometries

```{r}
length(which(st_is_valid(bd_jakarta) == FALSE))
```

Everything is valid

#### 3.2.2.2 Exclude redundant fields

Exclude all data except Municipality, District name, District Code, Sub-district Code, Sub-district name, Total Population and geometry of the regions.

```{r}
bd_jakarta <- bd_jakarta %>%
  select(2:4, 6:7, 9,)
```

#### 3.2.2.3 Rename from Bahasa Indonesia to English

| Index | Original Name | Translated Name   |
|-------|---------------|-------------------|
| 2     | KODE_DESA     | Sub_District_Code |
| 3     | DESA          | Sub_District      |
| 4     | KODE          | District_Code     |
| 6     | KAB_KOTA      | Municipality      |
| 7     | KECAMATAN     | District          |
| 9     | JUMLAH_PEN    | Total_Population  |

```{r}
#| code-fold: true
bd_jakarta <- bd_jakarta %>% 
  dplyr::rename(
    Municipality=KAB_KOTA,
    District=KECAMATAN,
    District_Code=KODE,
    Sub_District=DESA,
    Sub_District_Code=KODE_DESA,
    Total_Population=JUMLAH_PEN
    )
```

#### 3.2.2.4 Handle Missing Values

```{r}
#| code-fold: true
cat("There are", sum(is.na(bd_jakarta)), "missing values in", paste(names(which(colSums(is.na(bd_jakarta))>0)), collapse = ", "))
```

**Remove all rows with missing values**

```{r}
bd_jakarta <- na.omit(bd_jakarta)
```

### 3.2.3 Transform Coordinate System

```{r}
st_crs(bd_jakarta)
```

Transform the CRS to DGN95, ESPG code 23845

::: panel-tabset
#### Transform

```{r}
bd_jakarta <- st_transform(bd_jakarta, 23845)
```

#### View

```{r}
st_crs(bd_jakarta)
```
:::

### 3.2.4 Remove outer islands

Based on first glance in [View], there are several small islands surrounding the mainland. As this is not relevant to the analysis, they shall be omitted.

```{r}
# KEPULAUAN SERIBU means thousand islands
bd_jakarta <- filter(bd_jakarta, Municipality != "KEPULAUAN SERIBU")
```

### 3.2.5 Data Summary

```{r}
#| code-fold: true
c = length(unique(bd_jakarta$"Municipality"))
d = length(unique(bd_jakarta$"District"))
sd = length(unique(bd_jakarta$"Sub_District"))

cat("There are", c, "unique municipalities,", d, "unique districts, and", sd, "unique sub-districs")

rm(c,d,sd)
```

There a 5 unique cities, 42 unique districts and 261 unique sub-districts.

#### 3.2.5.1 View distribution 

::: panel-tabset
#### Districts per Municipality

```{r}
#| code-fold: true
df_grp_municipality = bd_jakarta %>% group_by(Municipality)  %>%
                    summarise(total_districts = n(),
                              .groups = 'drop')
                              
ggplot(df_grp_municipality, aes(x=Municipality, y=total_districts), fill=Municipality) + 
  geom_bar(stat = "identity",
           color="black",
           fill="lightblue4") + 
  ggtitle("Number of Districts by Municipality") +
  xlab("Municipality Name") +
  ylab("No. of Districts") 

#cleanup  
rm(df_grp_municipality)
```

#### Sub-districts per District

```{r}
#| code-fold: true
df_grp_districs = bd_jakarta %>% group_by(District)  %>%
                    summarise(total_sub_districts = n(),
                              .groups = 'drop')

ggplot(df_grp_districs, aes(x=District, y=total_sub_districts)) + 
  geom_bar(stat = "identity",
           color="black",
           fill="lightblue3") + 
  scale_x_discrete(guide = guide_axis(n.dodge=5))+
  ggtitle("Number of Sub-districts by District") +
  xlab("District Name") +
  ylab("No. of Sub-districts") 

#cleanup  
rm(df_grp_districs)
```
:::

#### 3.2.5.2 View by Municipality Divisions

```{r}
tm_shape(bd_jakarta) + 
  tm_polygons("Municipality")
```

#### 3.2.5.2 View by Population

::: panel-tabset
#### Distribution

```{r}
ggplot(bd_jakarta, aes(x=Total_Population)) + 
  geom_histogram(bins = 10,
                color="black",
                fill="indianred")
```

#### Map

Equal Interval Classification

```{r}
#| code-fold: true
tmap_mode("plot")
tm_shape(bd_jakarta) + 
  tm_fill("Total_Population",
          style = "equal",
          palette = "OrRd") + 
  tm_layout(main.title = "Distribution by Population") + 
  tm_borders(alpha = 0.5) 
```
:::

## 3.3 Aspatial Data

### 3.3.1 Load Data

All files were downloaded as "Data Vaksinasi Berbasis Kelurahan (\<last date of month\> \<Indonesian month name\> \<year\>).xlsx" were locally renamed as "\<last date of month\> \<English month name\> \<year\>.xlsx"

```{r}
#get list of aspatial data files
folder_path <- "data/aspatial"
files <- list.files(folder_path, pattern = ".xlsx", full.names = TRUE)

rm(folder_path) #cleanup
```

```{r}
#combines files into vacc_df
vacc_df <- data.frame()

for (file in files) {
  data <- read_excel(file, sheet = "Data Kelurahan") #sub-district
  data$Date <- dmy(str_extract(file, "\\d{2} [[:alpha:]]+ \\d{4}")) #add date column
  vacc_df <- bind_rows(vacc_df, data)
}

rm(file, data) #cleanup
```

### 3.3.2  Data Preprocessing

#### 3.3.2.1 Exclude redundant fields

Exclude all values except Municipality name, Sub-district name, Sub-district code, Target number, Number not yet vaccinated, Total vaccines administered and Date.

```{r}
vacc_df <-  vacc_df %>%
  select(1:2, 4:6, 9, 28)
```

#### 3.3.2.2 Rename from Bahasa Indonesia to English

| Index | Original Name          | Translated Name            |
|-------|------------------------|----------------------------|
| 1     | KODE KELURAHAN         | Sub_District_Code          |
| 2     | WILAYAH KOTA           | Municipality               |
| 4     | KELURAHAN              | Sub_District               |
| 5     | SANSARAN               | Target                     |
| 6     | BELUM VAKSIN           | Not_Yet_Vaccinated         |
| 9     | TOTAL VAKSIN DIBERIKAN | Total_Vaccine_Administered |

```{r}
#| code-fold: true
vacc_df <- vacc_df %>% 
  dplyr::rename(
    Municipality="WILAYAH KOTA",
    Sub_District="KELURAHAN",
    Sub_District_Code="KODE KELURAHAN",
    Target="SASARAN", 
    Not_Yet_Vaccinated="BELUM VAKSIN", 
    Total_Vaccine_Administered="TOTAL VAKSIN\r\nDIBERIKAN"
    )
```

#### 3.3.2.3 Handle Missing Values

```{r}
#| code-fold: true
cat("There are", sum(is.na(vacc_df)), "missing values in", paste(names(which(colSums(is.na(vacc_df))>0)), collapse = ", "))
```

Remove all rows with missing values

```{r}
vacc_df <- na.omit(vacc_df)
```

### 3.3.3 Remove outer islands

```{r}
vacc_df <- filter(vacc_df, Municipality != "KAB.ADM.KEP.SERIBU")
```

Remove column Municipality as there is no further need for it in this data frame

```{r}
vacc_df = vacc_df[,!(names(vacc_df) %in% "Municipality")]
```

## 3.4 Combined Data Wrangling

### 3.4.1 Join vaccination data

```{r}
df <- left_join(bd_jakarta, vacc_df,
         by=c("Sub_District_Code"="Sub_District_Code",
              "Sub_District"="Sub_District"))
```

**Visualise**

```{r}
#| code-fold: true
p1 = tm_shape(df)+
  tm_fill("Target") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Target")
  
p2 = tm_shape(df)+
  tm_fill("Total_Vaccine_Administered") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Total Vaccines Administered")


tmap_arrange(p1, p2)
rm(p1, p2) #cleanup
```

While Target and Total Vaccines Administered seem highly correlated, there several grey Missing patches which will be addressed below

### 3.4.2 Standardise Data

Although missing values from the geospatial and aspatial data have already been omitted, there is a "Missing" data in the above visualisation. This is because there are discrepancies between the sub-district names in the two datasets.

**View Discrepancies**

```{r}
#| code-fold: true
cases_subdistrict <- c(vacc_df$Sub_District)
bd_subdistrict <- c(bd_jakarta$Sub_District)

aspatial_list <- sort(unique(cases_subdistrict[!(cases_subdistrict %in% bd_subdistrict)]))
aspatial_list <- c(aspatial_list[1:3], aspatial_list[6], aspatial_list[5], aspatial_list[7:9], aspatial_list[4]) #rearrgane - hardcoded

geospatial_list <- sort(unique(bd_subdistrict[!(bd_subdistrict %in% cases_subdistrict)]))


spelling <- data.frame(
  Aspatial_Cases=aspatial_list,
  Geospatial_BD=geospatial_list
  )

# with dataframe a input, outputs a kable
library(knitr)
library(kableExtra)
kable(spelling, caption="Mismatched Records") %>%
  kable_material("hover", latex_options="scale_down")
  
rm(cases_subdistrict, bd_subdistrict, spelling) #cleanup
```

**Rename geospatial data with aspatial data values**

```{r}
for (i in 1:9) {
  bd_jakarta$Sub_District[bd_jakarta$Sub_District == geospatial_list[i]] <- aspatial_list[i]
}

rm(aspatial_list, geospatial_list, i) #cleanup
```

### 3.4.3 Join vaccination data (again)

```{r}
df <- left_join(bd_jakarta, vacc_df,
        by=c("Sub_District_Code"="Sub_District_Code",
              "Sub_District"="Sub_District"))
```

**Visualise**

```{r}
#| code-fold: true
p1 = tm_shape(df)+
  tm_fill("Target") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Target")
  
p2 = tm_shape(df)+
  tm_fill("Total_Vaccine_Administered") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Total Vaccines Administered")


tmap_arrange(p1, p2)
rm(p1, p2) #cleanup
```

Grey Missing data from 3.4.1 has been handled.

# 4.0 Choropleth Mapping

------------------------------------------------------------------------

```{r}

```

## 4.1 Compute Vaccination Rates

Add Vaccination Rate column to main dataframe (df)

```{r}
df <- df %>%
  mutate(vaccination_rate = ((Total_Population-Not_Yet_Vaccinated)/Total_Population)*100)
```

Create table vacc_rate_df that groups vaccination rate by sub-district and date

```{r}
vacc_rate_df <- df %>%
  st_drop_geometry  %>% #remove geometry for pivot
  group_by(Sub_District, Date) %>%
  summarise(vaccination_rate) %>%
  
  ungroup() %>% 
  pivot_wider(names_from = Date, #use pivot table to rearrange
              values_from = vaccination_rate) %>%
  
  left_join(bd_jakarta, by=c("Sub_District"="Sub_District")) #add geometry back
```

**View**

```{r}
head(vacc_rate_df)
```

Convert to sf object for plotting

```{r}
vacc_rate_df <- st_as_sf(vacc_rate_df)
```

## 4.2 Visualise monthly vaccination rates

```{r}
#| code-fold: true
#helper function for plots
#Can use fisher too


plot <- function(varname) {
  tm_shape(vacc_rate_df) +
    tm_polygons() +
  tm_shape(vacc_rate_df) +
    tm_fill(varname, 
          n= 6,
          style = "jenks", 
          palette="RdPu",
          title = "Vaccination Rate (%)") +
    tm_layout(main.title = paste("Vaccination rate by", paste(month(ymd(varname), label=TRUE), year(ymd(varname)))),
          main.title.position = "center",
          frame = TRUE) +
    tm_borders(alpha = 0.5)
}
```

**Plot**

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(plot("2021-07-31"), plot("2021-08-31"), plot("2021-09-30"),plot("2021-10-31"))
```

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(plot("2021-11-30"), plot("2021-12-31"), plot("2022-01-31"), plot("2022-02-27"))

```

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(plot("2022-03-31"), plot("2022-04-30"), plot("2022-05-31"), plot("2022-06-30"))
```

The vaccination rate increases over the year for all regions. The municipality / districts xxx start with the highest vaccination rates then other regions like xxx catch up.

## 4.3 Observations from Jenks based Mapping

**For lowest vaccination rates,**

```{r}
#| code-fold: true
#temporary dataset
temp_low <- df %>%
  group_by(Date) %>%
  filter(vaccination_rate == min(vaccination_rate)) %>% 
  arrange(Date)

#plot
ggplot(temp_low, aes(x=Date, y=vaccination_rate)) +
  geom_point(aes(color=temp_low$Sub_District)) + 
  ggtitle("Lowest Vaccination Rates over the Year by Sub-district")
```

Not only does the minimum vaccination rate increase over year, but the sub-district Bale Kambang has a sharp increase in its rate and no longer has the lowest vaccination rate by July 2022.

**For highest vaccination rates,**

```{r}
#| code-fold: true
#temporary dataset
temp_high <- df %>%
  group_by(Date) %>%
  filter(vaccination_rate == max(vaccination_rate)) %>% 
  arrange(Date)

#plot
ggplot(temp_high, aes(x=Date, y=vaccination_rate)) +
  geom_point(aes(color=temp_high$Sub_District)) + 
  ggtitle("Highest Vaccination Rates over the Year by Sub-district")
```

The sub-district Halim Perdana Kusumah has the highest vaccination rate for the most part.

The vaccination rate by July 31, 2021 for this sub-district at 72.08% is much higher than that of Bale Kambang which was at 48.23%. This difference of 23.85% gets smoothed down to 8.77% by June 30, 2022.

```{r}
temp <- data.frame(temp_low$Date, temp_low$vaccination_rate, temp_high$vaccination_rate) 

colors <- c("Lowest" = "orange", "Highest" = "steelblue")

ggplot(temp, aes(x=temp_low.Date)) + 
  geom_line(aes(y=temp_low.vaccination_rate, color="Lowest"), size = 1.2) + 
  geom_line(aes(y=temp_high.vaccination_rate, color="Highest"), size = 1.2) + 
  ggtitle("Highest and Lowest Vaccination Rates over the Year by Sub-district") + 
  labs(y = "Vaccination Rate (%)",
      color = "Vaccination Rate") +
  scale_color_manual(values = colors)
  
rm(temp, temp_low, temp_high, colors)
```

## 4.4 Spatio-Temporal Mapping with custom breakpoints

View how the vaccination rate increases in all regions over the year based on Jenks defined breakpoints.

With the lowest and highest vaccination rates over the year being 48.23% and 91.87%, the Jenks breakpoints are defined as follows

```{r}
breakpoints = c(48, 65, 72, 82, 86, 92)
```

```{r}
#| code-fold: true
#helper function for plotting
plot <- function(varname) {
  tm_shape(vacc_rate_df) +
    tm_polygons() +
  tm_shape(vacc_rate_df) +
    tm_fill(varname, 
          breaks= breakpoints,
          palette="RdPu",
          title = "Vaccination Rate") +
    tm_layout(main.title = paste("Vaccination rate by", paste(month(ymd(varname), label=TRUE), year(ymd(varname)))),
          main.title.position = "center",
          frame = TRUE) +
    tm_borders(alpha = 0.5)
}
```

**Plot**

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(plot("2021-07-31"), plot("2021-08-31"), plot("2021-09-30"),plot("2021-10-31"))
```

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(plot("2021-11-30"), plot("2021-12-31"), plot("2022-01-31"), plot("2022-02-27"))

```

```{r}
#| code-fold: true
tmap_mode("plot")
tmap_arrange(plot("2022-03-31"), plot("2022-04-30"), plot("2022-05-31"), plot("2022-06-30"))
```

\-\-\-\-\-\-\-\-\-\-\-\-\--

At the beginning, low rates in xxx, rates are good now.

During xxx months, they increased a bit more

# 5.0 Local Gi\* Analysis

Filter

```{r}
# filtered<-combined_df |> 
#   filter(date=="July 2021")
```

## 5.1 Compute contiguity weights: Queen's method

```{r}
# wm_q <- filtered |> 
#   mutate(nb = st_contiguity(geometry),
#          wt = st_weights(nb,
#                          style = "W"),
#          .before = 1)
```

## 5.2 Deriving fixed distance weights

```{r}
# geo <- sf::st_geometry(filtered)
# nb <- st_knn(geo, longlat = TRUE)
# dists <- unlist(st_nb_dists(geo, nb))
```

```{r}
#sum_dists<-summary(dists)
```

## 5.3 Compute fixed distance weights

```{r}
# wm_fd <- filtered %>%
#   mutate(nb = st_dist_band(geometry,
#                            upper = 3600
#                              ),
#                wt = st_weights(nb),
#                .before = 1)
```

## 5.4 Create function

## 5.5 Local Spatial Autocorrelation

## 5.6 Compute local moran's I

```{r}
#filtered
```

```{r}
# fips <- order(wm_fd$village_code)
# localMI <- local_moran(wm_fd$vaccination_rate,
#                        wm_fd$nb, 
#                        wm_fd$wt)
# head(localMI)
```

## 5.7 Print results in a list

```{r}
# head(printCoefmat(data.frame(
#   localMI[fips,], 
#   row.names=combined_df$village_code[fips]),
#   check.names=FALSE))
```

## 5.8 Map the local Moran's I

```{r}

```
