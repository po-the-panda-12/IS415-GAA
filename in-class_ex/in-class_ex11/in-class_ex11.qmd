---
title: "In-Class Exercise 11: Spatial Interaction Models"
date: "27 March 2023"
date-modified: "`r Sys.Date()`"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# 1.0 Setup

**Import Packages**

```{r}
pacman::p_load(tmap, sf, sp, caret, stplanr, reshape2, broom, tidyverse)
```

# 2.0 Data Wrangling

## 2.1 Aspatial Data

### 2.1.1 Load Data

::: panel-tabset
#### Import

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202210.csv")
```

#### Glimpse

```{r}
glimpse(odbus)
```
:::

### 2.1.2 Convert column data type

Change from double to ordinal type data

```{r}
odbus$ORIGIN_PT_CODE <-
  as.factor(odbus$ORIGIN_PT_CODE)

odbus$DESTINATION_PT_CODE <-
  as.factor(odbus$DESTINATION_PT_CODE)
```

### 2.1.3 Extract relevant data

Extract trips that occurred on weekdays between 7-9am

```{r}
odbus7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

### 2.1.4 Save checkpoint as RDS

Save file

```{r}
write_rds(odbus7_9, "data/rds/odbus7_9.rds")
```

Read file

```{r}
odbus7_9<-read_rds("data/rds/odbus7_9.rds")
```

## 2.2 Geospatial Data

### 2.2.1 Load Data

::: panel-tabset
#### Bus Stops

```{r}
busstop<-st_read(dsn="data/geospatial",
                 layer = "BusStop") %>% 
  st_transform(crs=3414)
```

#### Base Layer

```{r}
mpsz<-st_read(dsn="data/geospatial",
                 layer = "MPSZ-2019") %>% 
  st_transform(crs=3414)
```
:::

### 2.2.2 Retain relavent data

There are 5 bus stops in Johor Bahru, Malaysia that are to be excluded.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>% #order is important
  select(BUS_STOP_N, SUBZONE_C) %>% 
  st_drop_geometry()
```

### 2.2.3 Join bus stops into main df

```{r}
od_data <- left_join(odbus7_9, busstop_mpsz,
                     by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

### 2.2.4 Handle Duplicates

#### 2.2.4.1 Origin Bus stops

Count duplicates

```{r}
#| code-fold: true
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

cat("There are", nrow(duplicate), "duplicates.")
```

Remove duplicates

```{r}
od_data <- unique(od_data)
```

Check count duplicates

```{r}
#| code-fold: true
duplicate <- od_data %>% 
  group_by_all() %>% 
  filter(n()>1) %>% 
  ungroup()
cat("There are now", nrow(duplicate), "duplicates.")
```

#### 2.2.4.2 Destination Bus stops

Join data into main df

```{r}
od_data <- left_join(od_data, busstop_mpsz,
                     by = c("DESTIN_BS" = "BUS_STOP_N"))
```

Count duplicates

```{r}
#| code-fold: true
duplicate <- od_data %>% 
  group_by_all() %>% 
  filter(n()>1) %>% 
  ungroup()

cat("There are", nrow(duplicate), "duplicates.")
```

Remove duplicates

```{r}
od_data <- unique(od_data)
```

Check count duplicates

```{r}
#| code-fold: true
duplicate <- od_data %>% 
  group_by_all() %>% 
  filter(n()>1) %>% 
  ungroup()
cat("There are now", nrow(duplicate), "duplicates.")
```

### 2.2.5 Handle Missing values

Rename column and drop all missing values if any

```{r}
od_data <- od_data %>% 
  rename(DESTIN_SZ = SUBZONE_C) %>% 
  drop_na()
```

### 2.2.6 Visualise Data

```{r}
tmap_mode("plot")
qtm(mpsz)
```

# 3.0 Isolate by subzones

## 3.1 Extract SUBZONE_C into new df

::: panel-tabset
#### Extract

```{r}
mpsz <- mpsz[order(mpsz$SUBZONE_C),]
```

#### View

```{r}
head(mpsz, 10)
```
:::

## 3.2 Compute Distance Matrix

### 3.2.1 Convert to sp

```{r}
mpsz_sp <- as(mpsz, "Spatial")
```

### 3.2.2 Compute matrix

::: panel-tabset
#### Compute

```{r}
dist <- spDists(mpsz_sp)
```

#### View

```{r}
dist
```
:::

### 3.2.3 Sort subzone names

```{r}
sz_names <- mpsz$SUBZONE_C
```

### 3.2.4 Attach SUBZONE_C to row and column for distance matrix matching

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

## 3.3 Pivot distance value by SUBZONE_C

::: panel-tabset
#### Compute

```{r}
distPair <- melt(dist) %>%
  rename(dist = value)
```

#### View

```{r}
head(distPair, 10)
```
:::

## 3.4 Update intra-zonal distances

### 3.4.1 Compute minimum distance

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

(Any value smaller than 173m can be used)

### 3.4.2 Update distances

```{r}
distPair$dist <- ifelse(distPair$dist == 0,
                        50, #constant value added into intra zone 
                        distPair$dist)
```

### 3.4.3 Rename origin and destination fields

```{r}
distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
```

### 3.4.4 Calculate flow data

```{r}
flow_data <- od_data %>% 
  group_by(ORIGIN_SZ, DESTIN_SZ) %>% 
  summarise(TRIPS = sum(TRIPS))
```

## 3.5 Population data

### 3.5.1 Load Data

::: panel-tabset
#### Import

```{r}
pop <- read_csv("data/aspatial/pop.csv")
```

#### Glimpse

```{r}
glimpse(pop)
```
:::

### 3.5.2 Select relevant fields

```{r}
pop <- pop %>%
  left_join(mpsz,
            by = c("PA" = "PLN_AREA_N",
                   "SZ" = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
```

### 3.5.3 Get flow data

```{r}
flow_data1 <- flow_data %>%
  left_join(distPair,
            by = c("ORIGIN_SZ" = "orig",
                   "DESTIN_SZ" = "dest"))
```

### 3.5.4 Update flow data with population data

::: panel-tabset
#### Origin Population

```{r}
flow_data1<-flow_data1 %>% 
  left_join(pop,
            by = c(ORIGIN_SZ="SZ")) %>% 
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>% 
  select(-c(PA, SZ_NAME))
```

#### Destination Population

```{r}
flow_data1<-flow_data1 %>% 
  left_join(pop,
            by = c(DESTIN_SZ="SZ")) %>% 
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) %>% 
  select(-c(PA, SZ_NAME))
```
:::

## 
