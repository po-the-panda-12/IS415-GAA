---
title: "Hands-on Exercise 6: Spatial Weights and Applications"
date: "13 February 2023"
date-modified: "`r Sys.Date()`"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# 1.0 Overview

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute spatial weights using appropriate functions of **spdep** package, and

-   calculate spatially lagged variables using appropriate functions of **spdep** package.

# 2.1 Study Area and Dataset

-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.

## 2.2.1 Load Packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

# 3.0 Import Data

## 3.1 Geospatial Data

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

## 3.2 Aspatial Data

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## 3.3 Perform Relational Join

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

# 4.0 Visualise Regional Development Indicator

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# 5.0 Compute Contiguity Spatial Weights

## 5.1 QUEEN based neighbors

### 5.1.1 Calculation

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

**Neighbors of first polygon**

```{r}
wm_q[[1]]
```

**Retrieve county name by polygon ID**

```{r}
hunan$County[1]
```

**County names of neighbors of first polygon**

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
#hunan$NAME_3[wm_q[[1]]]
```

**Retrieve GDPPC of nearest neighbors or first polygon**

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

**Complete weight matrix**

```{r}
str(wm_q)
```

## 5.2 ROOK based neighbors

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

### 5.2.3 Visualise contiguity weights

Calculate polygon centroids and move them into the connectivity graph

```{r}

longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]]) #first value per centroid
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]]) #second value per centroid

coords <- cbind(longitude, latitude)
head(coords)
```

#### 5.2.3.1 Plot- QUEEN

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### 5.2.3.2 Plot- ROOK

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### 5.2.3.3 Comparison between QUEEN and ROOK based maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

# 6.0 Compute distance based neighbours

Identify neighbors of region points by Euclidean distance with lower d1 and upper d2 bounds controlled bounds = argument. (Reference - WGS84 folder)

## 6.1 Determine cut-off distance

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

## 6.2 Compute fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

::: panel-tabset
### View 1

```{r}
str(wm_d62)
```

### View 2

```{r}
table(hunan$County, card(wm_d62))
```
:::

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

### 6.2.1 Plot fixed distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE) #within cut off distance of 62km
plot(k1, coords, add=TRUE, col="red", length=0.08) #first nearest neighbors
```

Alternatively

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

## 6.3 Compute adaptive distance weight matrix

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6)
```

### 6.3.1 Plot distance based neighbours

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# 7.0 Weights based on IDW

Compute distance between areas

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## 7.1 Row-standardised weights matrix

Assign equal weights to all neighbors with `style="W"`. For a more robust value use `style="B"`

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

Weight of first polygon's eight neighbors

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor\'s income will be multiplied by 0.2 before being tallied.

Derive row standardized distance weight matrix with `style="B"`

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

# 8.0 Application of Spatial Weight Matrix

## 8.1 Spatial lag with row-standardized weights

Average neighbor GDPPC value for each polygon

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Append spatially lag GDPPC values onto hunan sf data frame

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
#average neighboring income values
head(hunan)
```

**Plot**

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

## 8.2 Spatial lag as a sum of neighbouring values

Assign binary weight of 1 to each neighbor then apply function

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Compute lag variable

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

Append to hunan dataframe

```{r}
hunan <- left_join(hunan, lag.res)
```

**Plot**

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

## 8.3 Spatial window avergae

\--

```{r}
wm_qs <- include.self(wm_q)
```

\--

```{r}
#neighbour list of area [1]
wm_qs[[1]] #6 neighbors, not 5
```

Obtain weights

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Assign weight values and create lag variable

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

Convert lag variable listw object into a dataframe

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC") #rename
```

Left join ag_window_avg GDPPC values onto hunan data

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

Table Comparison

```{r}
hunan %>%
  select("County", "lag GDPPC", "lag_window_avg GDPPC") %>%
  kable()
```

**Plot Comparison**

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

## 8.4 Spatial window sum

Add diagnal elements

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Assign binary weights

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1] #6 neighbors, not 5
```

Assign weight values

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Compute lag variable

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Convert lag variable listw object into a dataframe

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Left join *w_sum GDPPC*values onto hunan data

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Table Comparison

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

**Plot Comparison**

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
